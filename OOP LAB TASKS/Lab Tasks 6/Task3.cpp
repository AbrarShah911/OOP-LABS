#include <iostream>
#include <vector>
#include <string>
using namespace std;


class Employee {
protected:
    int employeeID;
    string name;

public:
    Employee(int id, string Name) : employeeID(id), name(Name) {}

    virtual void showRole() = 0;

    virtual ~Employee() {}
};

class IOrderTaker {
public:
    virtual void takeOrder() = 0;
    virtual ~IOrderTaker() {}
};

class IOrderPreparer {
public:
    virtual void prepareOrder() = 0;
    virtual ~IOrderPreparer() {}
};

class IBiller {
public:
    virtual void generateBill() = 0;
    virtual ~IBiller() {}
};


class Waiter : public Employee, public IOrderTaker {
public:
    Waiter(int id, string Name) : Employee(id, Name) {}

    void takeOrder() override {
        cout << name << " (Waiter) is taking an order." << endl;
    }

    void showRole() override {
        cout << name << " is a Waiter." << endl;
    }
};


class Chef : public Employee, public IOrderPreparer {
public:
    Chef(int id, string Name) : Employee(id, Name) {}

    void prepareOrder() override {
        cout << name << " (Chef) is preparing an order." << endl;
    }

    void showRole() override {
        cout << name << " is a Chef." << endl;
    }
};


class Cashier : public Employee, public IBiller {
public:
    Cashier(int id, string Name) : Employee(id, Name) {}

    void generateBill() override {
        cout << name << " (Cashier) is generating a bill." << endl;
    }

    void showRole() override {
        cout << name << " is a Cashier." << endl;
    }
};


class Manager : public Employee, public IOrderTaker, public IBiller {
public:
    Manager(int id, string Name) : Employee(id, Name) {}

    void takeOrder() override {
        cout << name << " (Manager) is taking an order." << endl;
    }

    void generateBill() override {
        cout << name << " (Manager) is generating a bill." << endl;
    }

    void showRole() override {
        cout << name << " is a Manager." << endl;
    }
};


class Menu {
protected:
    vector<string> items;
    vector<double> prices;

public:
    void addItem(string item, double price) {
        items.push_back(item);
        prices.push_back(price);
    }

    virtual double calculateTotal() = 0; 
};


class FoodMenu : public Menu {
public:
    double calculateTotal() override {
        double total = 0;
        for (double price : prices) {
            total += price;
        }
        return total * 1.1; // 10% Tax
    }
};

class BeverageMenu : public Menu {
public:
    double calculateTotal() override {
        double total = 0;
        for (double price : prices) {
            total += price;
        }
        return total * 1.15; // 15% Tax
    }
};

// Test Function
int main() {
    vector<Employee*> employees;

    employees.push_back(new Waiter(101, "Ali"));
    employees.push_back(new Chef(102, "Sara"));
    employees.push_back(new Cashier(103, "Hassan"));
    employees.push_back(new Manager(104, "Ayesha"));

    cout << "Restaurant Staff Roles:\n";
    for (Employee* emp : employees) {
        emp->showRole();
    }

// OKAY THE FOLLWOING LINES ARE COMPLETLY GENERATED BY AN LLM. WHAT IS A DYNAMIC CAST BHAI????

    cout << "\nTask Execution:\n";
    for (Employee* emp : employees) {
        if (IOrderTaker* orderTaker = dynamic_cast<IOrderTaker*>(emp)) {
            orderTaker->takeOrder();
        }
        if (IOrderPreparer* orderPreparer = dynamic_cast<IOrderPreparer*>(emp)) {
            orderPreparer->prepareOrder();
        }
        if (IBiller* biller = dynamic_cast<IBiller*>(emp)) {
            biller->generateBill();
        }
    }

    // Menu Testing
    FoodMenu foodMenu;
    foodMenu.addItem("Burger", 5.0);
    foodMenu.addItem("Pizza", 8.0);

    BeverageMenu beverageMenu;
    beverageMenu.addItem("Cola", 2.0);
    beverageMenu.addItem("Juice", 3.0);

    cout << "\nTotal Food Bill: $" << foodMenu.calculateTotal() << endl;
    cout << "Total Beverage Bill: $" << beverageMenu.calculateTotal() << endl;

    // Clean up memory
    for (Employee* emp : employees) {
        delete emp;
    }

    return 0;
}
